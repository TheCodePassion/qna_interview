1. What is Vanilla JS?
Vanilla JavaScript refers to using plain Javascript without any additional libraries or frameworks. Pure Js. 

2. What is 'use strict'?
"Use strict" is a directive that indicates that JavaScript code should be executed in the "strict mode." It is placed at the beginning of the code, and the strict mode prohibits certain actions such as using undeclared variables.

3. What is the difference between var, const, and let?
Before the release of ECMAScript 6, variables in JavaScript were declared only with the var keyword. Var and let have a lot in common, but the difference is that variables declared with let cannot be redeclared, and most importantly, such variables have block scope. This means they are only accessible within the block {} in which they were created. Var does not have block scope. For example, a variable i declared with var in a for loop will be accessible outside the loop. Const is used to declare constants. Attempting to change the value of a constant will result in an error. This applies only to changing the entire object; we can still modify the fields of an object. As for scope, const behaves like let; there is no difference between them. It is worth mentioning that it is also possible to create a variable without var, let, or const, but it is not recommended, and in such a case, the variable will have global scope.

4. What is ECMAScript 6?
ECMAScript 6 is a major update to the JavaScript language, dating back to 2015. Its changes are now a standard and widely used everywhere. It introduced features such as let and const, promises, arrow functions, classes, and many other things.

5. What is scope?
Scope refers to the part of a program where a variable, function, or object can be accessed. This can be a function, a block, or the entire program as a whole, in which case it is called global scope - meaning we are always in at least one scope.

6. Is JavaScript a typed language?
JavaScript is a loosely typed language, which means you do not explicitly specify the variable type. During program execution, a variable can hold any type of data, and operations are performed based on the variable's type. The result can also be coerced into a different data type (for example, an operation may return a string "5" instead of the number 5). This can sometimes lead to unintended errors in the code. TypeScript, by the way, is designed to address this issue.

7. What is immutability?
Immutability refers to the state of an object that cannot be changed.

8. How to make an object immutable?
To make an object immutable, you can use the freeze() method of the object.

9. How to determine if an object is frozen?
To determine if an object is frozen, meaning it is immutable, you can use the isFrozen() method.

10. What are the data types in JS?
There are a total of 8 data types in JavaScript. The primitive types are Undefined, Boolean, Number, String, BigInt, and Symbol. There is also a special primitive type called Null, and the object structure.

11. How to check if an object is an array?
To check if an object is an array, you can use the isArray() method. It returns true if the object is an array and false if it is not an array.

12. How to check if a number is finite?
To determine if a number is finite, you need to make sure it is not infinity (+/-Infinity) and not NaN. You can use the Number.isFinite() method. It returns false if the argument is NaN, positive or negative infinity (Infinity or -Infinity). Otherwise, it returns true.

13. What does the eval() method do?
The eval() method allows you to execute JavaScript code represented as a string. It returns the value of the executed code provided as a string. If the code doesn't return anything, undefined is returned.

14. How to check if a variable is equal to NaN?
To check for equality with NaN, you can use the isNaN function. Alternatively, you can use the Number.isNaN() method introduced in ECMAScript 6 or additionally check the literal or variable for a non-numeric value using typeof.

15. What is the difference between isNaN() and Number.isNaN() behavior?
The global isNaN() function converts the tested value to a number and then checks it.
The Number.isNaN() method does not convert values to a number and does not return true for any value that is not of the Number type. In general, it is preferable to use the Number.isNaN() method.

16. What is an Immediately Invoked Function Expression (IIFE)?
It is a JavaScript function that is executed immediately after it is defined.

17. What is destructuring?
Destructuring is a special assignment syntax that allows you to extract values from arrays or objects into variables in a concise way.

18. What is the difference between the "in" operator and the hasOwnProperty method?
Every object derived from Object inherits the hasOwnProperty method. This method can be used to determine whether an object has a specified property as its own property. Unlike the "in" operator, this method does not check for property existence in the object's prototype chain.

19. How to check if a substring exists in a string?
The includes() method checks if a string contains a specified substring and returns true or false accordingly.

20. What is the Temporal Dead Zone?
The Temporal Dead Zone is a term used to describe a state when variables are not accessible. They are within the scope but not yet declared.

21. What is a closure in JavaScript?
A closure is a function that remembers its outer variables and can access them.

22. What are the purposes of the setTimeout and setInterval methods?
These methods allow you to call a function after a certain delay (in an asynchronous manner). setTimeout executes the function once, while setInterval executes it repeatedly at specified time intervals.

23. What are queues and stacks?
These are data structures. A stack operates on the last-in, first-out (LIFO) principle, meaning the last item added is the first one to be removed. On the other hand, a queue operates on the first-in, first-out (FIFO) principle, where the first item added is the first one to be removed.

24. How does JavaScript execute code?
JavaScript executes code synchronously, sequentially, line by line. Before executing a line of code, the interpreter places it in the call stack. The call stack is where the code is parsed and executed. After execution, the line is removed from the stack, and the interpreter moves to the next line.

25. What is the event loop?
The event loop is an infinite loop in which the JavaScript engine waits for tasks, executes them, and waits for new tasks. The main task of the event loop is to control the call stack and the callback queue. JavaScript remains idle and waits for tasks. Once tasks appear, the engine starts executing them, starting with the first one. If a new task arrives while the engine is busy with the previous task, it is placed in the queue.

26. What are reference types?
Reference types are objects, including Object, Array, and Function. A variable containing a reference type does not actually contain its value but only a reference to the location in memory where the actual data is stored.

27. How can you clone an object?
To clone an object, you can use the Object.assign method or the spread operator. However, if you need to clone an object with nested objects, these methods won't work. You can either use a method from a library like Lodash or do it using the built-in JSON object.

28. How can you add an element to the beginning and end of an array?
To add an element to the beginning of an array, you can use the unshift() method. To add elements to the end, you can use the push() method.

29. What is the difference between undefined and is not defined?
Undefined is a value assigned to a declared but uninitialized variable. We get undefined when accessing an existing variable. In the case of accessing a non-existent (undeclared) variable, we get an "is not defined" error.

30. What is hoisting in JavaScript?
Hoisting is a behavior of the JavaScript compiler where variable and function declarations are moved to the top of their scope. Thanks to hoisting, we can use functions and variables before they are declared in the code.

31. What is the difference between function expression and function declaration?
Functions are values. They can be assigned, copied, or declared elsewhere in the code. If a function is declared as a separate statement in the main code flow, it is called a Function Declaration. If a function is created as part of an expression, it is considered a Function Expression. Function Declarations are processed before executing the code block and are visible throughout the block. Functions declared using Function Expressions are created only when the execution flow reaches them.

32. What is a function in JavaScript?
A function is a "subprogram" that can be called from external (or internal, in the case of recursion) code relative to the function. Like a program itself, a function consists of a sequence of statements called the function body. Values can be passed into a function, and the function can return a value.

33. What is 'this' in JavaScript?
'this' refers to the scope object during runtime. By default, 'this' points to the global object. In the browser, the expression 'this === window' will be true.

34. How does prototypal inheritance work?
In JavaScript, everything is an object. These objects are linked through prototype chains, through which methods and properties are inherited. When accessing a property or method of an object, the search first happens on the object itself. If the property is not found, the search is redirected to its prototype, then to the prototype's prototype, and so on until the desired property is found or the prototype chain ends.

35. What is the difference between null and undefined?
Null literally means "nothing." Undefined is a value that indicates a variable has been declared but not initialized.

36. What is the difference between forEach and map?
The difference is that forEach simply iterates over an array and executes the provided callback on each iteration, while map creates and returns a new array based on the original array.

37. In what cases are anonymous functions used?
Anonymous functions are often used as callbacks.

38. What is a callback function?
A callback function is a function that is supposed to be executed after another function has finished executing.

39. What are higher-order functions?
In JavaScript, functions can accept other functions as arguments and can also return functions as results. Functions that do this are called higher-order functions.

40. What is the difference between the == and === operators?
The double equals operator performs type coercion, while the strict equals operator does not.
