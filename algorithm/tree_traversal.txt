Binary Tree Inorder Traversal

var inorderTraversal = function(root) {
    const res = []

    function traverse(node) {
         if (node === null) {
         return;
    }
     traverse(node.left);
    res.push(node.val);
    traverse(node.right);
    }
      traverse(root);

  return res;
};


// Binary Tree Postorder Traversal

 class  TreeNode {
  constructor(val, left = null, right = null) {
    this.val = val;
    this.left = left;
    this.right = right;
  }
}

var postorderTraversal = function(root) {
      if (root === null) {
    return [];
  }
  
  const result = [];

  function traverse(node) {
    if (node.left !== null) {
      traverse(node.left);
    }
    if (node.right !== null) {
      traverse(node.right);
    }
    result.push(node.val);
  }

  traverse(root);
  return result;

};

// Binary Tree Preorder Traversal
var preorderTraversal = function(root) {
      if (root === null) {
    return [];
  }
  
  const result = [];

  function traverse(node) {
    result.push(node.val);
    
    if (node.left !== null) {
      traverse(node.left);
    }
    
    if (node.right !== null) {
      traverse(node.right);
    }
  }

  traverse(root);
  
  return result;

};

// Binary Tree Level Order Traversal

var levelOrder = function(root) {
 if (root === null) {
    return [];
  }
  
  const result = [];
  const queue = [root];

  while (queue.length > 0) {
    const level = [];
    const levelSize = queue.length;
    
    for (let i = 0; i < levelSize; i++) {
      const node = queue.shift();
      level.push(node.val);

      if (node.left !== null) {
        queue.push(node.left);
      }

      if (node.right !== null) {
        queue.push(node.right);
      }
    }

    result.push(level);
  }

  return result;
};
